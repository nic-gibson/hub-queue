xquery version "1.0-ml";

module namespace qh = "http://marklogic.com/community/components/queue/queue-heartbeat";

import module namespace qc = "http://marklogic.com/community/components/queue/queue-config" at "queue-config.xqy";
import module namespace qe = "http://marklogic.com/community/components/queue/queue-event" at "queue-event.xqy";
import module namespace qh = "http://marklogic.com/community/components/queue/queue-handler" at "queue-hander.xqy";

declare namespace queue = "http://marklogic.com/community/queue";

(:~ 
 : Functions to implement the 'ping' process. This process generates 
 : events in the database to be picked up during queue processing. 
 : These events generally don't have URIs associated with them. Instead
 : they cause events to be generated by the function handling the event
 :)

declare option xdmp:mapping "false";


(:~
 : Execute a heartbeat - find the configurations and then
 : write the events
 : @param $heartbeat-type the id of the ping issued
 : @return the uris of all the events created
 :)
declare function qh:heartbeat($heartbeat-type as xs:string) as xs:string* {


};


(:~ 
 : Find all of the heartbeat configurations that match the current
 : heartbeat type and return them
 : @param $heartbeat-type the id of the ping issued
 : @return all configurations of that type
:)
declare function qh:find-heartbeat-configs($heartbeat-type as xs:string) as element(queue:heartbeat-config)* {
    cts:search(fn:doc(), 
        cts:element-query(
            xs:QName('queue:heartbeat-config'), 
            cts:true-query()))//queue:heartbeat-config
};

(:~ 
 : Given a sequence of heartbeat configurations generate an event in the
 : queue for each one. 
:)
declare function qh:create-heartbeat-events($configs as element(queue:heartbeat-config)) as xs:string* {
    for $config in $configs 
        return qh:write(qe:create(
            $config/queue:type,
            ($config/queue:source, 'heartbeat')[1],
             $config/queue:payload/node(), 
             ()))
};
