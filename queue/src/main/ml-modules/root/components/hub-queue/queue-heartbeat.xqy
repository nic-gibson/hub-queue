xquery version "1.0-ml";

module namespace qt = "http://noslogan.org/components/hub-queue/queue-heartbeat";

import module namespace ql = "http://noslogan.org/components/hub-queue/queue-log" at "queue-log.xqy";
import module namespace qe = "http://noslogan.org/components/hub-queue/queue-event" at "queue-event.xqy";
import module namespace qh = "http://noslogan.org/components/hub-queue/queue-handler" at "queue-handler.xqy";
import module namespace qc = "http://noslogan.org/components/hub-queue/queue-config" at "queue-config.xqy";

declare namespace queue = "http://noslogan.org/hub-queue";

(:~ 
 : Functions to implement the heartbeat (or'ping') process. This process generates 
 : events in the database to be picked up during queue processing. 
 : These events generally don't have URIs associated with them. Instead
 : they cause events to be generated by the function handling the event
 :)

declare option xdmp:mapping "false";


(:~
 : Execute a heartbeat - find the configurations and then
 : write the events
 : @param $heartbeat-type the id of the heartbeat issued
 : @return the uris of all the events created
 :)
declare function qt:heartbeat($heartbeat-type as xs:string) as xs:string* {
    let $configs := qt:find-heartbeat-configs($heartbeat-type)
    let $_ := ql:trace-ids("Processing heartbeat of type " || $heartbeat-type || ", found " || fn:count($configs) || " configs to process.", ())
    return qt:create-heartbeat-events($configs)
};


(:~ 
 : Find all of the heartbeat configurations that match the current
 : heartbeat type and return them
 : @param $heartbeat-type the id of the ping issued
 : @return all configurations of that type
:)
declare function qt:find-heartbeat-configs($heartbeat-type as xs:string) as element(queue:heartbeat-config)* {
    xdmp:invoke-function( function() {
        cts:search(//queue:heartbeat-config, 
            cts:and-query((
                cts:element-query(xs:QName('queue:heartbeat-config'), cts:true-query()),
                cts:element-value-query(xs:QName('queue:heartbeat-id'), $heartbeat-type)
            )))
    }, map:new() => map:with('database', xdmp:modules-database()))
};

(:~ 
 : Given a sequence of heartbeat configurations generate an event in the
 : queue for each one. 
:)
declare function qt:create-heartbeat-events($configs as element(queue:heartbeat-config)*) as xs:string* {
    for $config in $configs 
        return if ($config/queue:type) 
            then qh:write(qe:create(
                $config/queue:type,
                ($config/queue:source, qc:heartbeat-source())[1],
                $config/queue:payload/node(), 
                ())
            )
            else 
                ql:warn-ids("Heartbeat config:&#xA0;" || xdmp:quote($config) || "&#xA0; is incomplete and will be skipped", ())
};